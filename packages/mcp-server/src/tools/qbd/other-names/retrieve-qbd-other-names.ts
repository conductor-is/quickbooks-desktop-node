// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'conductor-node-mcp/filtering';
import { Metadata, asTextContentResult } from 'conductor-node-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Conductor from 'conductor-node';

export const metadata: Metadata = {
  resource: 'qbd.other_names',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/quickbooks-desktop/other-names/{id}',
};

export const tool: Tool = {
  name: 'retrieve_qbd_other_names',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nRetrieves an other-name by ID.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/other_name',\n  $defs: {\n    other_name: {\n      type: 'object',\n      title: 'The Other-Name object',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'The unique identifier assigned by QuickBooks to this other-name. This ID is unique across all other-names but not across different QuickBooks object types.'\n        },\n        accountNumber: {\n          type: 'string',\n          description: 'The other-name\\'s account number, which appears in the QuickBooks chart of accounts, reports, and graphs.\\n\\nNote that if the \"Use Account Numbers\" preference is turned off in QuickBooks, the account number may not be visible in the user interface, but it can still be set and retrieved through the API.'\n        },\n        address: {\n          type: 'object',\n          title: 'The Address object',\n          description: 'The other-name\\'s address.',\n          properties: {\n            city: {\n              type: 'string',\n              description: 'The city, district, suburb, town, or village name of the address.'\n            },\n            country: {\n              type: 'string',\n              description: 'The country name of the address.'\n            },\n            line1: {\n              type: 'string',\n              description: 'The first line of the address (e.g., street, PO Box, or company name).'\n            },\n            line2: {\n              type: 'string',\n              description: 'The second line of the address, if needed (e.g., apartment, suite, unit, or building).'\n            },\n            line3: {\n              type: 'string',\n              description: 'The third line of the address, if needed.'\n            },\n            line4: {\n              type: 'string',\n              description: 'The fourth line of the address, if needed.'\n            },\n            line5: {\n              type: 'string',\n              description: 'The fifth line of the address, if needed.'\n            },\n            note: {\n              type: 'string',\n              description: 'A note written at the bottom of the address in the form in which it appears, such as the invoice form.'\n            },\n            postalCode: {\n              type: 'string',\n              description: 'The postal code or ZIP code of the address.'\n            },\n            state: {\n              type: 'string',\n              description: 'The state, county, province, or region name of the address.'\n            }\n          },\n          required: [            'city',\n            'country',\n            'line1',\n            'line2',\n            'line3',\n            'line4',\n            'line5',\n            'note',\n            'postalCode',\n            'state'\n          ]\n        },\n        alternateContact: {\n          type: 'string',\n          description: 'The name of a alternate contact person for this other-name.'\n        },\n        alternatePhone: {\n          type: 'string',\n          description: 'The other-name\\'s alternate telephone number.'\n        },\n        companyName: {\n          type: 'string',\n          description: 'The name of the company associated with this other-name. This name is used on invoices, checks, and other forms.'\n        },\n        contact: {\n          type: 'string',\n          description: 'The name of the primary contact person for this other-name.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'The date and time when this other-name was created, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm), in the QuickBooks Desktop host machine’s local timezone.'\n        },\n        customFields: {\n          type: 'array',\n          description: 'The custom fields for the other-name object, added as user-defined data extensions, not included in the standard QuickBooks object.',\n          items: {\n            type: 'object',\n            title: 'The Custom Field object',\n            properties: {\n              name: {\n                type: 'string',\n                description: 'The name of the custom field, unique for the specified `ownerId`. For public custom fields, this name is visible as a label in the QuickBooks UI.'\n              },\n              ownerId: {\n                type: 'string',\n                description: 'The identifier of the owner of the custom field, which QuickBooks internally calls a \"data extension\". For public custom fields visible in the UI, such as those added by the QuickBooks user, this is always \"0\". For private custom fields that are only visible to the application that created them, this is a valid GUID identifying the owning application. Internally, Conductor always fetches all public custom fields (those with an `ownerId` of \"0\") for all objects.'\n              },\n              type: {\n                type: 'string',\n                description: 'The data type of this custom field.',\n                enum: [                  'amount_type',\n                  'date_time_type',\n                  'integer_type',\n                  'percent_type',\n                  'price_type',\n                  'quantity_type',\n                  'string_1024_type',\n                  'string_255_type'\n                ]\n              },\n              value: {\n                type: 'string',\n                description: 'The value of this custom field. The maximum length depends on the field\\'s data type.'\n              }\n            },\n            required: [              'name',\n              'ownerId',\n              'type',\n              'value'\n            ]\n          }\n        },\n        email: {\n          type: 'string',\n          description: 'The other-name\\'s email address.'\n        },\n        externalId: {\n          type: 'string',\n          description: 'A globally unique identifier (GUID) you, the developer, can provide for tracking this object in your external system. This field is immutable and can only be set during object creation.'\n        },\n        fax: {\n          type: 'string',\n          description: 'The other-name\\'s fax number.'\n        },\n        firstName: {\n          type: 'string',\n          description: 'The first name of the contact person for this other-name.'\n        },\n        isActive: {\n          type: 'boolean',\n          description: 'Indicates whether this other-name is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.'\n        },\n        lastName: {\n          type: 'string',\n          description: 'The last name of the contact person for this other-name.'\n        },\n        middleName: {\n          type: 'string',\n          description: 'The middle name of the contact person for this other-name.'\n        },\n        name: {\n          type: 'string',\n          description: 'The case-insensitive unique name of this other-name, unique across all other-names.\\n\\n**NOTE**: Other-names do not have a `fullName` field because they are not hierarchical objects, which is why `name` is unique for them but not for objects that have parents.'\n        },\n        note: {\n          type: 'string',\n          description: 'A note or comment about this other-name.'\n        },\n        objectType: {\n          type: 'string',\n          description: 'The type of object. This value is always `\"qbd_other_name\"`.',\n          enum: [            'qbd_other_name'\n          ]\n        },\n        phone: {\n          type: 'string',\n          description: 'The other-name\\'s primary telephone number.'\n        },\n        revisionNumber: {\n          type: 'string',\n          description: 'The current QuickBooks-assigned revision number of this other-name object, which changes each time the object is modified. When updating this object, you must provide the most recent `revisionNumber` to ensure you\\'re working with the latest data; otherwise, the update will return an error.'\n        },\n        salutation: {\n          type: 'string',\n          description: 'The formal salutation title that precedes the name of the contact person for this other-name, such as \"Mr.\", \"Ms.\", or \"Dr.\".'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'The date and time when this other-name was last updated, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm), in the QuickBooks Desktop host machine’s local timezone.'\n        }\n      },\n      required: [        'id',\n        'accountNumber',\n        'address',\n        'alternateContact',\n        'alternatePhone',\n        'companyName',\n        'contact',\n        'createdAt',\n        'customFields',\n        'email',\n        'externalId',\n        'fax',\n        'firstName',\n        'isActive',\n        'lastName',\n        'middleName',\n        'name',\n        'note',\n        'objectType',\n        'phone',\n        'revisionNumber',\n        'salutation',\n        'updatedAt'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
        description: 'The QuickBooks-assigned unique identifier of the other-name to retrieve.',
      },
      conductorEndUserId: {
        type: 'string',
        description:
          'The ID of the EndUser to receive this request (e.g., `"Conductor-End-User-Id: {{END_USER_ID}}"`).',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id', 'conductorEndUserId'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (conductor: Conductor, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await conductor.qbd.otherNames.retrieve(id, body)));
};

export default { metadata, tool, handler };
